#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å—É–ø–µ—Ä-–±—ã—Å—Ç—Ä–æ–≥–æ Gemini Proxy
"""

import requests
import time
import os
import sys
import json
import threading
import concurrent.futures
from pathlib import Path
import statistics

class Color:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class OptimizationTester:
    def __init__(self, base_url, api_key, audio_file):
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.audio_file = audio_file
        self.results = {}
        
    def log(self, message, color=Color.ENDC):
        print(f"{color}{message}{Color.ENDC}")
        
    def make_request(self, endpoint="", method="GET", **kwargs):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        url = f"{self.base_url}{endpoint}"
        headers = kwargs.get('headers', {})
        if self.api_key:
            headers['Authorization'] = f'Bearer {self.api_key}'
        kwargs['headers'] = headers
        
        try:
            if method == "GET":
                return requests.get(url, timeout=30, **kwargs)
            elif method == "POST":
                return requests.post(url, timeout=120, **kwargs)
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {endpoint}: {e}", Color.FAIL)
            return None
    
    def transcribe_audio(self, format_type="json"):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"""
        start_time = time.perf_counter()
        
        with open(self.audio_file, 'rb') as f:
            files = {'file': (self.audio_file, f, 'audio/wav')}
            data = {
                'response_format': format_type,
                'language': 'auto'
            }
            
            response = self.make_request(
                "/v1/audio/transcriptions",
                method="POST",
                files=files,
                data=data
            )
            
            duration = time.perf_counter() - start_time
            
            if response and response.status_code == 200:
                if format_type == "text":
                    text = response.text
                else:
                    result = response.json()
                    text = result.get('text', '')
                
                return {
                    'success': True,
                    'duration': duration,
                    'text': text,
                    'text_length': len(text),
                    'chars_per_second': len(text) / duration if duration > 0 else 0
                }
            else:
                return {
                    'success': False,
                    'duration': duration,
                    'error': response.text if response else "No response"
                }
        
    def test_01_health_check(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
        self.log("\n" + "="*60, Color.HEADER)
        self.log("üè• –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        response = self.make_request("/health")
        if not response or response.status_code != 200:
            self.log("‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª", Color.FAIL)
            return False
            
        health_data = response.json()
        self.log("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç", Color.GREEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimizations = health_data.get('optimizations', {})
        self.log("\nüîß –°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:", Color.CYAN)
        
        opt_count = 0
        for opt_name, enabled in optimizations.items():
            emoji = "‚úÖ" if enabled else "‚ùå"
            color = Color.GREEN if enabled else Color.WARNING
            self.log(f"   {emoji} {opt_name}: {enabled}", color)
            if enabled:
                opt_count += 1
        
        system_info = health_data.get('system', {})
        self.log(f"\nüìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", Color.CYAN)
        self.log(f"   üî• –ü—Ä–æ–≥—Ä–µ—Ç: {system_info.get('prewarmed', False)}")
        self.log(f"   üîó –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {system_info.get('active_connections', 0)}")
        self.log(f"   üóÑÔ∏è –†–∞–∑–º–µ—Ä –∫–µ—à–∞: {system_info.get('cache_size', 0)}")
        
        self.results['health_check'] = {
            'success': True,
            'optimizations_active': opt_count,
            'system_info': system_info
        }
        
        return True
    
    def test_02_basic_transcription(self):
        """–¢–µ—Å—Ç 2: –ë–∞–∑–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"""
        self.log("\n" + "="*60, Color.HEADER)
        self.log("üéµ –¢–ï–°–¢ 2: –ë–ê–ó–û–í–ê–Ø –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–Ø", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        result = self.transcribe_audio()
        
        if result['success']:
            self.log(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", Color.GREEN)
            self.log(f"   ‚è±Ô∏è –í—Ä–µ–º—è: {result['duration']:.3f}s")
            self.log(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {result['text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
            self.log(f"   üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {result['chars_per_second']:.1f} —Å–∏–º–≤/—Å–µ–∫")
            self.log(f"   üìÑ –¢–µ–∫—Å—Ç: {result['text'][:100]}...")
        else:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {result['error']}", Color.FAIL)
            
        self.results['basic_transcription'] = result
        return result['success']
    
    def test_03_cache_effectiveness(self):
        """–¢–µ—Å—Ç 3: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log("\n" + "="*60, Color.HEADER)
        self.log("üóÑÔ∏è –¢–ï–°–¢ 3: –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        self.make_request("/cache/clear", method="POST")
        self.log("üßπ –ö–µ—à –æ—á–∏—â–µ–Ω")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (cold)
        self.log("\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (cold cache):")
        first_result = self.transcribe_audio()
        
        if not first_result['success']:
            self.log("‚ùå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è", Color.FAIL)
            return False
            
        self.log(f"   ‚è±Ô∏è Cold cache: {first_result['duration']:.3f}s", Color.CYAN)
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (warm)
        self.log("\n2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (warm cache):")
        second_result = self.transcribe_audio()
        
        if not second_result['success']:
            self.log("‚ùå –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è", Color.FAIL)
            return False
            
        self.log(f"   ‚è±Ô∏è Warm cache: {second_result['duration']:.3f}s", Color.CYAN)
        
        # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if first_result['text'] == second_result['text']:
            speedup = first_result['duration'] / second_result['duration']
            time_saved = first_result['duration'] - second_result['duration']
            efficiency = (time_saved / first_result['duration']) * 100
            
            self.log(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ï–®–ò–†–û–í–ê–ù–ò–Ø:", Color.GREEN)
            self.log(f"   üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
            self.log(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: {time_saved:.3f}s")
            self.log(f"   üíæ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
            
            cache_effective = speedup > 2  # –ö–µ—à –¥–æ–ª–∂–µ–Ω —É—Å–∫–æ—Ä—è—Ç—å –º–∏–Ω–∏–º—É–º –≤ 2 —Ä–∞–∑–∞
            if cache_effective:
                self.log("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!", Color.GREEN)
            else:
                self.log("‚ö†Ô∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –æ—á–µ–Ω—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ", Color.WARNING)
                
        else:
            self.log("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è!", Color.FAIL)
            cache_effective = False
        
        self.results['cache_test'] = {
            'first_duration': first_result['duration'],
            'second_duration': second_result['duration'],
            'speedup': speedup if 'speedup' in locals() else 0,
            'effective': cache_effective if 'cache_effective' in locals() else False
        }
        
        return cache_effective if 'cache_effective' in locals() else False
    
    def test_04_warmup_effectiveness(self):
        """–¢–µ—Å—Ç 4: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–∞"""
        self.log("\n" + "="*60, Color.HEADER)  
        self.log("üî• –¢–ï–°–¢ 4: –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –ü–†–û–ì–†–ï–í–ê", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ–≤
        warmup_response = self.make_request("/warmup", method="POST")
        
        if warmup_response and warmup_response.status_code == 200:
            warmup_data = warmup_response.json()
            self.log(f"‚úÖ –ü—Ä–æ–≥—Ä–µ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω: {warmup_data.get('warmed', False)}", Color.GREEN)
        else:
            self.log("‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ–≤ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ", Color.WARNING)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ–≤–∞
        health_response = self.make_request("/health")
        if health_response:
            health_data = health_response.json()
            prewarmed = health_data.get('system', {}).get('prewarmed', False)
            self.log(f"üå°Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥—Ä–µ—Ç–∞: {prewarmed}")
            
        self.results['warmup_test'] = {'success': True, 'prewarmed': prewarmed}
        return True
    
    def test_05_concurrent_requests(self):
        """–¢–µ—Å—Ç 5: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Ç–µ—Å—Ç –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)"""
        self.log("\n" + "="*60, Color.HEADER)
        self.log("üîó –¢–ï–°–¢ 5: –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ï –ó–ê–ü–†–û–°–´", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        num_concurrent = 3
        self.log(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {num_concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        
        def single_request():
            return self.transcribe_audio()
        
        start_time = time.perf_counter()
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=num_concurrent) as executor:
            futures = [executor.submit(single_request) for _ in range(num_concurrent)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        total_time = time.perf_counter() - start_time
        
        successful = [r for r in results if r['success']]
        failed = [r for r in results if not r['success']]
        
        self.log(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–• –ó–ê–ü–†–û–°–û–í:", Color.CYAN)
        self.log(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {len(successful)}/{num_concurrent}")
        self.log(f"   ‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö: {len(failed)}/{num_concurrent}")
        self.log(f"   ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.3f}s")
        
        if successful:
            durations = [r['duration'] for r in successful]
            avg_duration = statistics.mean(durations)
            self.log(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {avg_duration:.3f}s")
        
        self.results['concurrent_test'] = {
            'total_requests': num_concurrent,
            'successful': len(successful),
            'failed': len(failed),
            'total_time': total_time,
            'avg_duration': avg_duration if successful else 0
        }
        
        return len(successful) >= num_concurrent * 0.8  # 80% —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    def test_06_different_formats(self):
        """–¢–µ—Å—Ç 6: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞"""
        self.log("\n" + "="*60, Color.HEADER)
        self.log("üìÑ –¢–ï–°–¢ 6: –§–û–†–ú–ê–¢–´ –û–¢–í–ï–¢–ê", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        formats = ['json', 'text', 'verbose_json']
        format_results = {}
        
        for fmt in formats:
            self.log(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç: {fmt}")
            result = self.transcribe_audio(fmt)
            
            if result['success']:
                self.log(f"   ‚úÖ {fmt}: {result['duration']:.3f}s", Color.GREEN)
                format_results[fmt] = True
            else:
                self.log(f"   ‚ùå {fmt}: {result['error']}", Color.FAIL)
                format_results[fmt] = False
        
        successful_formats = sum(format_results.values())
        self.log(f"\nüìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: {successful_formats}/{len(formats)}")
        
        self.results['format_test'] = format_results
        return successful_formats >= 2  # –ú–∏–Ω–∏–º—É–º 2 —Ñ–æ—Ä–º–∞—Ç–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
    
    def test_07_metrics_endpoint(self):
        """–¢–µ—Å—Ç 7: –≠–Ω–¥–ø–æ–∏–Ω—Ç –º–µ—Ç—Ä–∏–∫"""
        self.log("\n" + "="*60, Color.HEADER)
        self.log("üìä –¢–ï–°–¢ 7: –≠–ù–î–ü–û–ò–ù–¢ –ú–ï–¢–†–ò–ö", Color.HEADER)
        self.log("="*60, Color.HEADER)
        
        response = self.make_request("/metrics")
        
        if response and response.status_code == 200:
            try:
                metrics_data = response.json()
                self.log("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã", Color.GREEN)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
                cache_stats = metrics_data.get('cache_stats', {})
                if cache_stats:
                    self.log(f"   üóÑÔ∏è –ö–µ—à: —Ä–∞–∑–º–µ—Ä {cache_stats.get('size', 0)}, –º–∞–∫—Å {cache_stats.get('max_size', 0)}")
                
                performance_logs = metrics_data.get('performance_logs', [])
                self.log(f"   üìù –õ–æ–≥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(performance_logs)}")
                
                self.results['metrics_test'] = {'success': True, 'cache_stats': cache_stats}
                return True
                
            except json.JSONDecodeError:
                self.log("‚ùå –ú–µ—Ç—Ä–∏–∫–∏ –≤–µ—Ä–Ω—É–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON", Color.FAIL)
        else:
            self.log("‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç –º–µ—Ç—Ä–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", Color.FAIL)
        
        self.results['metrics_test'] = {'success': False}
        return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        self.log(f"\n{Color.BOLD}üß™ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø{Color.ENDC}")
        self.log(f"{'='*70}")
        self.log(f"üåê URL: {self.base_url}")
        self.log(f"üìÑ –§–∞–π–ª: {self.audio_file}")
        self.log(f"üìè –†–∞–∑–º–µ—Ä: {os.path.getsize(self.audio_file)/1024:.1f} KB")
        
        tests = [
            self.test_01_health_check,
            self.test_02_basic_transcription,
            self.test_03_cache_effectiveness,
            self.test_04_warmup_effectiveness, 
            self.test_05_concurrent_requests,
            self.test_06_different_formats,
            self.test_07_metrics_endpoint
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        start_time = time.perf_counter()
        
        for i, test in enumerate(tests, 1):
            try:
                if test():
                    passed_tests += 1
                    self.log(f"‚úÖ –¢–µ—Å—Ç {i} –ø—Ä–æ–π–¥–µ–Ω", Color.GREEN)
                else:
                    self.log(f"‚ùå –¢–µ—Å—Ç {i} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω", Color.FAIL)
            except Exception as e:
                self.log(f"üí• –¢–µ—Å—Ç {i} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}", Color.FAIL)
        
        total_time = time.perf_counter() - start_time
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report(passed_tests, total_tests, total_time)
        
        return passed_tests, total_tests
    
    def generate_final_report(self, passed, total, duration):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        self.log("\n" + "="*70, Color.HEADER)
        self.log("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢", Color.HEADER)
        self.log("="*70, Color.HEADER)
        
        success_rate = (passed / total) * 100
        color = Color.GREEN if success_rate >= 80 else Color.WARNING if success_rate >= 60 else Color.FAIL
        
        self.log(f"üéØ –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)", color)
        self.log(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø: {duration:.1f} —Å–µ–∫—É–Ω–¥")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
        self.log(f"\nüìà –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        
        if 'basic_transcription' in self.results and self.results['basic_transcription']['success']:
            bt = self.results['basic_transcription']
            self.log(f"   üéµ –ë–∞–∑–æ–≤–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {bt['duration']:.3f}s, {bt['chars_per_second']:.1f} —Å–∏–º–≤/—Å–µ–∫")
        
        if 'cache_test' in self.results and self.results['cache_test']['effective']:
            ct = self.results['cache_test'] 
            self.log(f"   üóÑÔ∏è –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: —É—Å–∫–æ—Ä–µ–Ω–∏–µ {ct['speedup']:.1f}x")
        
        if 'concurrent_test' in self.results:
            conc = self.results['concurrent_test']
            self.log(f"   üîó –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {conc['successful']}/{conc['total_requests']} —É—Å–ø–µ—à–Ω—ã—Ö")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        self.log(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        
        if success_rate < 60:
            self.log("   üî¥ –ö–†–ò–¢–ò–ß–ù–û: –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –ª–æ–≥–∏.", Color.FAIL)
        elif success_rate < 80:
            self.log("   üü° –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ.", Color.WARNING)
        else:
            self.log("   üü¢ –û–¢–õ–ò–ß–ù–û: –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ö–æ—Ä–æ—à–æ!", Color.GREEN)
        
        if 'cache_test' in self.results and not self.results['cache_test']['effective']:
            self.log("   üìå –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ - —É–≤–µ–ª–∏—á—å—Ç–µ CACHE_SIZE –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
        if 'concurrent_test' in self.results and self.results['concurrent_test']['failed'] > 0:
            self.log("   üìå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ - —É–≤–µ–ª–∏—á—å—Ç–µ MAX_CONNECTIONS")

def main():
    print(f"{Color.BOLD}üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢–ï–† –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô{Color.ENDC}")
    print("="*70)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    LOCAL_URL = "http://localhost:8080"
    CLOUD_URL = os.getenv('CLOUD_RUN_URL')
    API_KEY = os.getenv('GEMINI_API_KEY')
    
    if not API_KEY:
        print(f"{Color.FAIL}‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY{Color.ENDC}")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    test_files = ['test_audio.wav', 'test_audio.mp3', 'test_audio.m4a']
    audio_file = None
    
    for file_name in test_files:
        if os.path.exists(file_name):
            audio_file = file_name
            break
    
    if not audio_file:
        print(f"{Color.FAIL}‚ùå –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª: {' –∏–ª–∏ '.join(test_files)}{Color.ENDC}")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    print(f"\n{Color.BLUE}üè† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ö–ê–õ–¨–ù–û–ì–û –°–ï–†–í–ï–†–ê{Color.ENDC}")
    print("-" * 50)
    
    local_tester = OptimizationTester(LOCAL_URL, API_KEY, audio_file)
    try:
        local_passed, local_total = local_tester.run_all_tests()
        print(f"\n{Color.CYAN}üìä –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {local_passed}/{local_total} —Ç–µ—Å—Ç–æ–≤{Color.ENDC}")
    except Exception as e:
        print(f"{Color.FAIL}üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}{Color.ENDC}")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Cloud Run (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if CLOUD_URL:
        print(f"\n{Color.BLUE}‚òÅÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CLOUD RUN{Color.ENDC}")
        print("-" * 50)
        
        cloud_tester = OptimizationTester(CLOUD_URL, API_KEY, audio_file)
        try:
            cloud_passed, cloud_total = cloud_tester.run_all_tests()
            print(f"\n{Color.CYAN}üìä Cloud Run: {cloud_passed}/{cloud_total} —Ç–µ—Å—Ç–æ–≤{Color.ENDC}")
        except Exception as e:
            print(f"{Color.FAIL}üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Cloud Run: {e}{Color.ENDC}")
    else:
        print(f"\n{Color.WARNING}‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CLOUD_RUN_URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Cloud Run{Color.ENDC}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\n{Color.BOLD}üéØ –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò{Color.ENDC}")
    print("="*50)
    print("1. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    print("2. üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ /metrics –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏") 
    print("3. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à—É –Ω–∞–≥—Ä—É–∑–∫—É")
    print("4. üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    print("5. üìà –°—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ –∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π")

if __name__ == "__main__":
    main()
