from flask import Flask, request
import google.generativeai as genai
import tempfile
import os
import time
import logging
from concurrent.futures import ThreadPoolExecutor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
executor = ThreadPoolExecutor(max_workers=10)
model = None

def init_model():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    global model
    start_time = time.time()
    model = genai.GenerativeModel("gemini-2.5-flash")
    logger.info(f"‚ö° Model initialized in {(time.time() - start_time)*1000:.1f}ms")

@app.route('/v1/audio/transcriptions', methods=['POST'])
def transcribe_audio():
    # üïê –û–±—â–∏–π —Ç–∞–π–º–µ—Ä
    request_start = time.time()
    logger.info("üéØ New transcription request started")
    
    try:
        # üïê –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
        validation_start = time.time()
        
        api_key = request.headers.get('Authorization', '')[7:].strip()
        if not api_key:
            return {"error": {"message": "No API key"}}, 401
        
        genai.configure(api_key=api_key)
        
        audio_file = request.files.get('file')
        if not audio_file:
            return {"error": {"message": "No file"}}, 400
        
        ext = audio_file.filename.split('.')[-1].lower()
        if ext not in {'flac', 'm4a', 'mp3', 'mp4', 'mpeg', 'mpga', 'oga', 'ogg', 'wav', 'webm'}:
            return {"error": {"message": "Bad format"}}, 400
        
        validation_time = (time.time() - validation_start) * 1000
        logger.info(f"‚úÖ Request validation: {validation_time:.1f}ms")
        
        # üïê –≠—Ç–∞–ø 2: –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        file_process_start = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        audio_file.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü
        file_size = audio_file.tell()
        file_size_mb = file_size / (1024 * 1024)
        audio_file.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ë–ï–ó –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫ - —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
        with tempfile.NamedTemporaryFile(suffix=f'.{ext}', delete=False) as temp_file:
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è
            audio_file.save(temp_file.name)
            temp_path = temp_file.name
        
        file_process_time = (time.time() - file_process_start) * 1000
        logger.info(f"üìÅ File ready ({file_size_mb:.1f}MB): {file_process_time:.1f}ms")
        
        try:
            # üïê –≠—Ç–∞–ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Gemini
            upload_start = time.time()
            uploaded_file = genai.upload_file(temp_path)
            upload_time = (time.time() - upload_start) * 1000
            logger.info(f"‚¨ÜÔ∏è  Upload to Gemini: {upload_time:.1f}ms")
            
            # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
            os.unlink(temp_path)
            
            # üïê –≠—Ç–∞–ø 4: –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            transcription_start = time.time()
            global model
            if model is None:
                init_model()
                
            response = model.generate_content([
                "Transcribe accurately:", 
                uploaded_file
            ])
            transcription_time = (time.time() - transcription_start) * 1000
            logger.info(f"ü§ñ Gemini transcription: {transcription_time:.1f}ms")
            
            # üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ë–ï–ó –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏)
            total_time = (time.time() - request_start) * 1000
            
            logger.info(f"""
üéØ TRANSCRIPTION COMPLETED:
üìÅ File: {file_size_mb:.1f}MB ({ext})
‚è±Ô∏è  TIMING BREAKDOWN:
   ‚Ä¢ Validation: {validation_time:.1f}ms
   ‚Ä¢ File processing: {file_process_time:.1f}ms  
   ‚Ä¢ Upload to Gemini: {upload_time:.1f}ms
   ‚Ä¢ Gemini processing: {transcription_time:.1f}ms
   ‚Ä¢ TOTAL: {total_time:.1f}ms
üìù Text length: {len(response.text)} chars
            """)
            
            return {"text": response.text.strip()}
            
        except Exception as e:
            try:
                os.unlink(temp_path)
            except:
                pass
            total_time = (time.time() - request_start) * 1000
            logger.error(f"‚ùå Error after {total_time:.1f}ms: {str(e)}")
            raise
            
    except Exception as e:
        total_time = (time.time() - request_start) * 1000
        logger.error(f"‚ùå Request failed after {total_time:.1f}ms: {str(e)}")
        return {"error": {"message": str(e)}}, 500

if __name__ == '__main__':
    print("üöÄ Ultra-Fast Gemini Proxy with Performance Monitoring")
    init_model()
    app.run(
        host='0.0.0.0', 
        port=8080, 
        debug=False, 
        threaded=True,
        processes=1,
        use_reloader=False
    )
else:
    # –î–ª—è Cloud Run - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
    init_model()
